name: CI

on:
  pull_request:
    types: [synchronize, opened, reopened]
  push:
    branches: [main]
  schedule:
    # additionally run once per week (At 00:00 on Sunday) to maintain cache
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.os }} / ghc ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Don't fail fast because we test a lot of versions and it's
      # good to know which ones work and which ones don't
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        cabal: ["3.10"]
        ghc:
          - "8.8.4"
          - "8.10.7"
          - "9.0.1"
          - "9.0.2"
          # 9.2 series from .4 onwards don't seem to work
          - "9.2.3"
          - "9.4.1"
          - "9.4.2"
          - "9.4.4"
          - "9.4.5"
          - "9.4.6"
          - "9.4.7"
          - "9.6.3"
          - "9.8.1"

        exclude:
          - os: macOS-latest
            ghc: 8.8.4
          - os: windows-latest
            ghc: 8.8.4
    steps:
    - uses: actions/checkout@v4

    - uses: haskell-actions/setup@v2
      id: setup-haskell-cabal
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
        cabal-update: true

    - name: Set envvar EXTRA_FLAGS
      shell: bash
      if: ${{ matrix.ghc == '9.8.1' }}
      run: |
        echo "EXTRA_FLAGS=--allow-newer" >> "$GITHUB_ENV"

    # Tom says: I'm not sure whether it's correct to configure before
    # freezing because it might defeat the point of caching. However,
    # configuring *after* freezing seemed to mean that the cache got
    # stuck in some bad state where it couldn't find a build plan.  We
    # should revisit this decision later.
    - name: Configure
      shell: bash
      run: |
        cabal configure --enable-tests --enable-benchmarks --test-show-details=direct $EXTRA_FLAGS
        # Generate dist-newstyle/cache/plan.json for the cache key.
        cabal build --dry-run

    - uses: actions/cache@v3.3.2
      name: Cache ~/.cabal/store
      with:
        path: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
        key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dist-newstyle/cache/plan.json') }}

    - name: Build
      run: |
        cabal build all

    - name: Test
      run: |
        cabal test stan-test

    - if: matrix.os == 'windows-latest'
      name: Dogfooding on Windows
      run: |
        cabal run stan -- --config-file=.stan-windows.toml

    - if: matrix.os != 'windows-latest'
      name: Dogfooding
      run: |
        cabal run stan

  # As at 2023-10-15, the GitHub-hosted runner for ubuntu-latest comes with
  # Stack 2.13.1 and GHC 9.6.3.
  stack:
    name: stack / ghc ${{ matrix.ghc }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ghc: ["9.4.7"] # The version specified in the stack.yaml file
        cache-bust: ["2023-10-15"]

    steps:
    - name: Clone project
      uses: actions/checkout@v4

    - name: Cache the Stack root
      uses: actions/cache@v3
      with:
        path: ~/.stack
        key: ${{ runner.os }}-${{ hashFiles('stack.yaml') }}-${{ matrix.cache-bust }}

    - name: Build everything
      run: |
        stack build --test --bench --no-run-tests --no-run-benchmarks

    - name: Run test-suites
      run: |
        stack test

    - name: Apply built stan to stan
      run: |
        stack exec -- stan --cabal-file-path stan.cabal

  hlint:
    name: hlint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run HLint
      env:
         HLINT_VERSION: "3.6.1"
      run: |
        curl https://raw.githubusercontent.com/kowainik/relude/v1.0.0.1/.hlint.yaml -o .hlint-relude.yaml

        curl -L https://github.com/ndmitchell/hlint/releases/download/v${HLINT_VERSION}/hlint-${HLINT_VERSION}-x86_64-linux.tar.gz --output hlint.tar.gz
        tar -xvf hlint.tar.gz
        ./hlint-${HLINT_VERSION}/hlint src/ test/ -h .hlint-relude.yaml
